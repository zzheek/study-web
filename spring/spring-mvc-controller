# 스프링 MVC 컨트롤러
- 상속이나 인터페이스를 구현X, 어노테이션만으로 처리 가능
- 오버라이드 없이 필요한 메소드 정의
- 메소드의 파라미터를 기본 자료형이나 객체 자료형으로 마음대로 지정
- 메소드의 리턴타입도 void,String,객체 등 다양한 타입 사용 가능

- @RequestMapping: 특정한 경로의 요청을 지정

# 스프링 MVC 기능
- 파라미터 자동 수집: DTO/VO 등을 메소드의 파라미터로 설정하면 자동으로 전달되는 HttpServletRequest의 파라미터들을 수집해 주는 기능

# Java Beans과 @ModelAttribute
- 파라미터로 getter/setter를 이용하는 Java Beans의 형식의 사용자 정의 클래스가 파라미터인 경우에는 자동으로 화면까지 객체 전달

# RedirectAttributes와 리다이렉션
PRG 패턴을 처리하기 위해서 RedirectAttributes라는 타입을 제공
  - addAttribute(키,값): 리다이렉트할 때 쿼리 스트링이 되는 값을 지정
  - addFlashAttribute(키,값): 일회용으로만 데이터를 전달하고 삭제되는 값을 지정

# 스프링 MVC에서 주로 사용되는 어노테이션들
- 컨트롤러 클래스의 선언부
  - @Controller: 스프링 빈이 처리됨을 명시
  - @RestController: REST 방식의 처리를 위한 컨트롤러임을 명시
  - @RequestMapping: 특정한 URL 패턴에 맞는 컨트롤러인지를 명시

- 메소드 선언부에 사용하는 어노테이션
  - @GetMapping/@PostMapping/@DeleteMapping/@PutMapping: HTTP 전송 방식에 따라 해당 메소드를 지정하는 경우에 사용
  - @RequestMapping: GET/POST 방식 모두를 지원하는 경우에 사용
  - @Responsebody: REST 방식에서 사용

- 메소드 파라미터에 사용하는 어노테이션
  - @RequestParam: Request에 있는 특정한 이름의 데이터를 파라미터로 받아서 처리하는 경우에 사용
  - @PathVariable: URL 경로의 일부를 변수로 삼아서 처리하기 위해서 사용
  - @ModelAttribute: 해당 파라미터는 반드시 모델에 포함되어서 다시 뷰로 전달됨을 명시
  - @SessionAttribute/@Valid/@RequestBody

# 스프링 MVC의 예외 처리
일반적인 방식은 @ControllerAdvice를 이용하는 것. C~이 선언된 클래스 역시 스프링 빈으로 처리됨.
  
