# 의존성 주입
- 스프링은 자체적으로 객체(Bean)를 생성/관리하며 필요한 곳으로 객체를 주입(injection). 이를 위해서는 설정 파일이나 어노테이션 등을 이용해야 함.
- 스프링의 빈 설정은 xml을 이용 or 별도의 클래스를 이용하는 자바 설정이 가능

# 스프링 빈 설정 테스트
스프링으로 프로젝트 구성시 많은 객체를 설정, 개발 단계에서 많은 테스트를 진행하며 개발하는 것이 좋음.

@Autowired: 만일 해당 타입의 빈이 존재하면 여기에 주입해 주기를 원한다는 의미
@ExtendWith: JUnit5에서 'spring-test'를 이용하기 위한 설정(JUnit4에서는 @Runwith)
@ContextConfiguration: 스프링의 설정 정보를 로딩하기 위해서 사용(xml인 경우 locaions, java인 경우 classes)

# ApplicationContext와 Bean
스프링에서 빈을 관리하기 위해서 존재함

@Controller: MVC의 컨트롤러 
@Service: 서비스 계층의 객체
@Repository: DAO와 같은 객체
@Component: 일반 객체나 유틸리티 객체

- component-scan: 속성값으로 패키지 지정. 해당 패키지를 스캔해서 스프링의 어노테이션들을 인식

# 생성자 주입 방식
- 주입 받아야 하는 객체의 변수는 final로 작성
- 생성자를 이용해서 해당 변수를 생성자의 파라미터로 지정
- Lombok에서는 @RequiredArgsConstructor을 이용하여 생성자 함수를 자동으로 작성할수 있음

# 인터페이스를 이용한 느슨한 결합
객체와 객체의 의존 관계의 실제 객체를 몰라도 가능하게 하는 방식

# 스프링의 빈으로 지정되는 객체들
스프링의 빈으로 등록되는 객체들은 핵심 객체들, 오랜 시간동안 프로그램 내에 상주하면서 중요한 역할을 하는 역할 중심의 객체들.
DTO/VO같이 데이터 중심 객체들은 빈으로 등록되지 않음.

# xml이나 어노테이션으로 처리하는 개체
직접 작성되는 클래스는 어노테이션/jar 파일로 추가되는 클래스는 <bean> 이용


